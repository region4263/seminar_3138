import logging
import pathlib
import asyncio
from aiogram import Bot, Dispatcher, types, executor
from configparser import ConfigParser


BOT_DIR = pathlib.Path(__file__).parent
config = ConfigParser()
config.read(BOT_DIR / 'bot.conf', encoding='utf-8')

TOKEN = config.get('bot', 'TOKEN')
MY_LINK = config.get('bot', 'LINK')

# Configure logging
logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    """
    –≠—Ç–æ—Ç handler –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞–Ω –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç
    –∫–æ–º–∞–Ω–¥—É `/start` –∏–ª–∏ `/help`
    """
    await message.reply(
        f"–ü—Ä–∏–≤–µ—Ç!\n–Ø EchoBot!\n–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ–Ω—è –¥—Ä—É–∑—å—è–º {MY_LINK}.")


@dp.message_handler(regexp='(^cat[s]?$|puss)')
async def cats(message: types.Message):
    with open(BOT_DIR / 'media/approval.png', 'rb') as picture:
        await message.reply_photo(picture, caption='–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ üò∫')


@dp.message_handler()
async def echo(message: types.Message):
    await message.answer(message.text)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
